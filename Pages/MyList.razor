@page "/myList"
@inject SingletonService searchInput
@inject HttpClient client
@using System.Net.Http
@using Newtonsoft.Json
<h1>MyList</h1>
<button @onclick=@Refresh>Update List</button><button @onclick="RemoveFavorite">Remove from My List</button><button @onclick="Rerender">Rerender</button>
@if (searchInput.searchInput == null)
{
    <p><em>Look for a movie via the search bar!</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr style="color:antiquewhite">
                <th>Title</th>
                <th>Release date</th>
                <th>Original language</th>
                <th>Popularity</th>
                <th>Remove</th> 
                <th>Poster</th>   
            </tr>
        </thead>
        <tbody>
            @foreach (MovieItem movieItem in searchInput.favoritesList.ToList<MovieItem>()){
                <tr style="color:antiquewhite">
                    <td>@movieItem.Title</td>
                    <td>@movieItem.release_Date</td>
                    <td>@movieItem.original_language</td>
                    <td>@movieItem.popularity</td>
                    <td><input type="checkbox" @bind=@movieItem.notFavorite></td>
                    <td><img src=@movieItem.full_poster_path alt="alternatetext" style="width:350px;height:400px;"></td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    async Task RemoveFavorite(){
                if(searchInput.username != null){

        foreach(MovieItem tempItem in searchInput.favoritesList.ToList<MovieItem>()){
            if(tempItem.notFavorite && searchInput.favoritesList.Contains(tempItem)){

            IEnumerable<KeyValuePair<string, string>> pairs = new List<KeyValuePair<string,string>>(){
            new KeyValuePair<string, string>("title",tempItem.Title),
            new KeyValuePair<string, string>("user_name",searchInput.username),
            };
            HttpContent content = new FormUrlEncodedContent(pairs);
            HttpResponseMessage response = await client.PostAsync("https://us-central1-userservice-314812.cloudfunctions.net/removeMovie", content);
            string myResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine(myResponse);
            Console.WriteLine("removed");
            //Console.WriteLine(response)
            //searchInput.favoritesList = await client.GetFromJsonAsync<List<MovieItem>>("https://us-central1-userservice-314812.cloudfunctions.net/createUser");
            StateHasChanged();
            }
        }
    }else{
        Console.WriteLine("Log in first");
    }
    }
    void Rerender(){
        StateHasChanged();
    }

    async Task Refresh()
    {
    if(searchInput.username != null){

    IEnumerable<KeyValuePair<string, string>> pairs = new List<KeyValuePair<string,string>>(){
            new KeyValuePair<string, string>("user_name",searchInput.username),
            
    };
    HttpContent content = new FormUrlEncodedContent(pairs);
    var settings = new JsonSerializerSettings
                    {
                        NullValueHandling = NullValueHandling.Ignore,
                        MissingMemberHandling = MissingMemberHandling.Ignore
                    };
    HttpResponseMessage response = await client.PostAsync("https://europe-central2-userservice-314812.cloudfunctions.net/getMovies", content);
    string myResponse = await response.Content.ReadAsStringAsync();
    List<MovieItem> receivedList = JsonConvert.DeserializeObject<List<MovieItem>>(myResponse,settings);
    searchInput.favoritesList = receivedList.ToList<MovieItem>();
    Console.WriteLine("refreshed");
    Console.WriteLine(searchInput.favoritesList.Count());
    StateHasChanged();
    }else{
        Console.WriteLine("Log in first");
    }
    }

    protected override async Task OnInitializedAsync(){
    if(searchInput.username != null){

    IEnumerable<KeyValuePair<string, string>> pairs = new List<KeyValuePair<string,string>>(){
            new KeyValuePair<string, string>("user_name",searchInput.username),
            
    };
    HttpContent content = new FormUrlEncodedContent(pairs);
    var settings = new JsonSerializerSettings
                    {
                        NullValueHandling = NullValueHandling.Ignore,
                        MissingMemberHandling = MissingMemberHandling.Ignore
                    };
    HttpResponseMessage response = await client.PostAsync("https://europe-central2-userservice-314812.cloudfunctions.net/getMovies", content);
    string myResponse = await response.Content.ReadAsStringAsync();
    List<MovieItem> receivedList = JsonConvert.DeserializeObject<List<MovieItem>>(myResponse,settings);
    searchInput.favoritesList = receivedList.ToList<MovieItem>();
    Console.WriteLine("init");
    Console.WriteLine(searchInput.favoritesList.Count());
    StateHasChanged();       

    //MovieItem movie = JsonConvert.DeserializeObject<MovieItem>(myResponse);
    //Console.WriteLine(myResponse);
    }else{
        Console.WriteLine("Log in first");
    }
    }

    /*
    protected override void OnInitialized(){
        foreach(MovieItem one in searchInput.favoritesList.ToList<MovieItem>()){
            foreach(MovieItem two in searchInput.favoritesList.ToList<MovieItem>()){
                if(one.Title == two.Title && one != two) searchInput.favoritesList.Remove(one);
            }
        }
    }

    void RemoveFavorite(){
        foreach(MovieItem tempItem in searchInput.favoritesList.ToList<MovieItem>()){
            if(tempItem.notFavorite && searchInput.favoritesList.Contains(tempItem)){
            searchInput.favoritesList.Remove(tempItem);
            }
        }
    }
    */


}
